(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1050, u"Table \'auth_user\' already exists")'
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/HEIDIEditor/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'google:datastore\')              # connect to Google BigTable\n                                              # optional DAL(\'gae://namespace\')\n    session.connect(request, response, db = db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\nelse:                                         # else use a normal relational database\n    #db = DAL(\'postgres://publications:Pass@localhost:5432/publications\')       # if not, use SQLite or other DB\n    db = DAL(\'mysql://publications:SP1SQL-cb@localhost:3306/publications\')\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import *\nmail = Mail()                                  # mailer\nauth = Auth(globals(),db)                      # authentication/authorization\ncrud = Crud(globals(),db)                      # for CRUD helpers using auth\nservice = Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'  # your SMTP server\nmail.settings.sender = \'you@gmail.com\'         # your email\nmail.settings.login = \'username:password\'      # your credentials or None\n\nauth.settings.hmac_key = \'sha512:2674c3a8-8bdd-4f1c-8eb1-efb9ec41ac24\'   # before define_tables()\n\n########################################\ndb.define_table(\'auth_user\',\n    Field(\'id\',\'id\',\n          represent=lambda id:SPAN(id,\' \',A(\'view\',_href=URL(\'auth_user_read\',args=id)))),\n    Field(\'username\', type=\'string\',\n          label=T(\'Username\')),\n    Field(\'first_name\', type=\'string\',\n          label=T(\'First Name\')),\n    Field(\'last_name\', type=\'string\',\n          label=T(\'Last Name\')),\n    Field(\'email\', type=\'string\',\n          label=T(\'Email\')),\n    Field(\'password\', type=\'password\',\n          readable=False,\n          label=T(\'Password\')),\n    Field(\'created_on\',\'datetime\',default=request.now,\n          label=T(\'Created On\'),writable=False,readable=False),\n    Field(\'modified_on\',\'datetime\',default=request.now,\n          label=T(\'Modified On\'),writable=False,readable=False,\n          update=request.now),\n    Field(\'registration_key\',default=\'\',\n          writable=False,readable=False),\n    Field(\'reset_password_key\',default=\'\',\n          writable=False,readable=False),\n    Field(\'registration_id\',default=\'\',\n          writable=False,readable=False),\n    format=\'%(username)s\',\n    migrate=settings.migrate)\n\n\ndb.auth_user.first_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ndb.auth_user.last_name.requires = IS_NOT_EMPTY(error_message=auth.messages.is_empty)\ndb.auth_user.password.requires = CRYPT(key=auth.settings.hmac_key)\ndb.auth_user.username.requires = IS_NOT_IN_DB(db, db.auth_user.username)\ndb.auth_user.registration_id.requires = IS_NOT_IN_DB(db, db.auth_user.registration_id)\ndb.auth_user.email.requires = (IS_EMAIL(error_message=auth.messages.invalid_email),\n                               IS_NOT_IN_DB(db, db.auth_user.email))\nauth.settings.actions_disabled.append(\'register\')\nauth.define_tables(migrate=settings.migrate)                           # creates all needed tables\nauth.settings.mailer = mail                    # for user email verification\nauth.settings.registration_requires_verification = True\nauth.settings.registration_requires_approval = True\nauth.messages.verify_email = \'Click on the link http://\'+request.env.http_host+URL(\'default\',\'user\',args=[\'verify_email\'])+\'/%(key)s to verify your email\'\nauth.settings.reset_password_requires_verification = True\nauth.messages.reset_password = \'Click on the link http://\'+request.env.http_host+URL(\'default\',\'user\',args=[\'reset_password\'])+\'/%(key)s to reset your password\'\n\n#########################################################################\n## If you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, uncomment and customize following\n# from gluon.contrib.login_methods.rpx_account import RPXAccount\n# auth.settings.actions_disabled=[\'register\',\'change_password\',\'request_reset_password\']\n# auth.settings.login_form = RPXAccount(request, api_key=\'...\',domain=\'...\',\n#    url = "http://localhost:8000/%s/default/user/login" % request.application)\n## other login methods are in gluon/contrib/login_methods\n#########################################################################\n\ncrud.settings.auth = None                      # =auth to enforce authorization on crud\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/HEIDIEditor/models/db.py", line 72, in <module>\n    migrate=settings.migrate)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/base.py", line 873, in lazy_define_table\n    polymodel=polymodel)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/base.py", line 482, in create_table\n    self.create_sequence_and_triggers(query, table)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/base.py", line 1366, in create_sequence_and_triggers\n    self.execute(query)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/base.py", line 1385, in execute\n    return self.log_execute(*a, **b)\n  File "/usr/local/lib/python2.7/dist-packages/pydal/adapters/base.py", line 1379, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/home/www-data/web2py/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/www-data/web2py/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nInternalError: (1050, u"Table \'auth_user\' already exists")\n'
p11
s.